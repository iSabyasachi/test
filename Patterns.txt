1. Sliding Window :

In many problems dealing with an array (or a LinkedList), we are asked to find or calculate something among 
all the subarrays (or sublists) of a given size.
Ex : Given an array, find the average of all subarrays of ‘K’ contiguous elements in it.

2. Two Pointers :

In problems where we deal with sorted arrays (or LinkedLists) and need to find a set of elements that fulfill certain constraints, 
the Two Pointers approach becomes quite useful. The set of elements could be a pair, a triplet or even a subarray. 
For example, take a look at the following problem:
Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target.

3. Fast & Slow Pointers :
4. Merge Intervals
5. Cyclic Sort
6. In-Place Reversal of a LinkedList

In a lot of problems, we are asked to reverse the links between a set of nodes of a LinkedList. 
Often, the constraint is that we need to do this in-place, i.e., using the existing node objects and without using extra memory.

7. Tree Breadth First Search

This pattern is based on the Breadth First Search (BFS) technique to traverse a tree.

Any problem involving the traversal of a tree in a level-by-level order can be efficiently solved using 
this approach. We will use a Queue to keep track of all the nodes of a level before we jump onto the next 
level. This also means that the space complexity of the algorithm will be O(W), where ‘W’ is the maximum 
number of nodes on any level.

8. Tree Depth First Search

This pattern is based on the Depth First Search (DFS) technique to traverse a tree.

We will be using recursion (or we can also use a stack for the iterative approach) to keep track of all 
the previous (parent) nodes while traversing. This also means that the space complexity of the algorithm 
will be O(H), where ‘H’ is the maximum height of the tree.

9. Two Heaps
10. Subsets
11. Modified Binary Search
12. Bitwise XOR
13. Top 'K' Elements

Any problem that asks us to find the top/smallest/frequent ‘K’ elements among a given set falls under this pattern.

The best data structure that comes to mind to keep track of ‘K’ elements is Heap. This pattern will make use of the Heap 
to solve multiple problems dealing with ‘K’ elements at a time from a set of given elements.

14. K-way Merge
15. 0/1 Knapsack(Dynamic Programming)
16. Topological Sort(Graph)

